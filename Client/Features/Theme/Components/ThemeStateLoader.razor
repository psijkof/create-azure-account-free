@using BlazorApp.Client.Features.Theme.Store
@using System.Text.Json
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting

@inherits FluxorComponent
@inject IDispatcher Dispatcher
@inject IState<ThemeState> _themeState
@inject IJSRuntime _jsRuntime
@inject IWebAssemblyHostEnvironment _webHost

@if (_webHost.Environment == "Development")
{
    @if (_isReady)
    {
        <MudIconButton Icon="@Icons.Material.Filled.Save" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(() => SaveThemeToFile())" />
        <InputFile id="fileInput" OnChange="LoadThemeFromFile" hidden accept=".json" />
        <MudIconButton HtmlTag="label" Icon="@Icons.Material.Filled.CloudUpload" Color="Color.Inherit" Edge="Edge.Start" for="fileInput" />
    }
    else
    {
        <MudProgressCircular Indeterminate="true" />
    }
}


@code {
    private bool _isReady => _themeState.Value.IsInitialized && !_themeState.Value.IsLoading;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        // dispatch loadaction
        Dispatcher.Dispatch(new ThemeStateLoadAction(null));
    }

    async Task SaveThemeToFile()
    {
        var options = new JsonSerializerOptions { WriteIndented = true };
        var json = JsonSerializer.Serialize(_themeState.Value.MudTheme, options);

        var fileStream = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(json));
        var fileName = "_mudBlazorTheme.json"; //default
        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await _jsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    void LoadThemeFromFile(InputFileChangeEventArgs e)
    {
        Dispatcher.Dispatch(new ThemeStateLoadAction(e.File));
    }

}
